name: VPS Local Build and Deploy

on:
  push:
    tags:
      - "v[0-9]+\\.[0-9]+\\.[0-9]+-staging"
      - "v[0-9]+\\.[0-9]+\\.[0-9]+-production"
      - "v[0-9]+\\.[0-9]+\\.[0-9]+-local"
  workflow_dispatch:

jobs:
  deploy-ubuntu:
    if: ${{ contains(github.ref, '-production') || contains(github.ref, '-staging') }}
    runs-on: ubuntu-latest
    environment: ${{ contains(github.ref, '-production') && 'production' || contains(github.ref, '-staging') && 'staging' }}

    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v4

      - name: 2. Set environment based on branch
        id: env_branch
        run: |
          if [[ "${GITHUB_REF}" == "refs/tags/v"* ]]; then
            if [[ "${GITHUB_REF}" == *"-production" ]]; then
              echo "environment=production" >> $GITHUB_ENV
            elif [[ "${GITHUB_REF}" == *"-staging" ]]; then
              echo "environment=staging" >> $GITHUB_ENV
            else
              echo "Unknown environment, exiting."
              exit 1
            fi
          else
            echo "Not a version tag, exiting."
            exit 1
          fi
        shell: bash

      - name: 3. Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_PRIVATE_KEY }}

      - name: 4. Pull the latest code
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd ${{ vars.VPS_PATH }} &&
            git fetch &&
            git checkout ${{ contains(github.ref, '-production') && 'main' || contains(github.ref, '-staging') && 'staging' }} &&
            git pull origin ${{ contains(github.ref, '-production') && 'main' || contains(github.ref, '-staging') && 'staging' }}
          "

      - name: 5. Create .env file on VPS
        env:
          HOST_URL: ${{ secrets.HOST_URL }}
          NOVU_SECRET_KEY: ${{ secrets.NOVU_SECRET_KEY }}
          NOVU_BRIDGE_URL: ${{ secrets.NOVU_BRIDGE_URL }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            echo 'HOST_URL=${HOST_URL}' > ${{ vars.VPS_PATH }}/my-novu-app/.env &&
            echo 'NOVU_SECRET_KEY=${NOVU_SECRET_KEY}' > ${{ vars.VPS_PATH }}/my-novu-app/.env &&
            echo 'NOVU_BRIDGE_URL=${NOVU_BRIDGE_URL}' >> ${{ vars.VPS_PATH }}/my-novu-app/.env
          "

      - name: 6. Build Docker images on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd ${{ vars.VPS_PATH }}/my-novu-app &&
            docker compose build
          "

      - name: 7. Restart services with new images on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd ${{ vars.VPS_PATH }}/my-novu-app &&
            docker compose down &&
            docker compose up -d
          "

      - name: 8. Clean up unused Docker images on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            docker image prune -af
          "

      - name: 9. Remove old containers on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            docker container prune -f
          "

      - name: 10. Remove unused volumes on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            docker volume prune -f
          "
